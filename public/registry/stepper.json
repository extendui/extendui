{
  "name": "stepper",
  "type": "registry:ui",
  "dependencies": ["@radix-ui/react-slot"],
  "files": [
    {
      "content": "\"use client\";\r\n\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\nimport { CheckIcon, LoaderCircleIcon } from \"lucide-react\";\r\nimport * as React from \"react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst stepperVariants = cva(\r\n    \"group/stepper inline-flex\",\r\n    {\r\n        variants: {\r\n            variant: {\r\n                default: \"data-[orientation=horizontal]:flex-row data-[orientation=vertical]:flex-col\",\r\n            },\r\n            orientation: {\r\n                horizontal: \"flex-row\",\r\n                vertical: \"flex-col\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            variant: \"default\",\r\n            orientation: \"horizontal\",\r\n        },\r\n    }\r\n);\r\n\r\nconst stepperItemVariants = cva(\r\n    \"group/step flex items-center\",\r\n    {\r\n        variants: {\r\n            orientation: {\r\n                horizontal: \"flex-row\",\r\n                vertical: \"flex-col\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            orientation: \"horizontal\",\r\n        },\r\n    }\r\n);\r\n\r\nconst indicatorVariants = cva(\r\n    \"flex size-6 shrink-0 items-center justify-center rounded-full text-xs font-medium\",\r\n    {\r\n        variants: {\r\n            variant: {\r\n                default: \"bg-muted text-muted-foreground data-[state=active]:bg-primary data-[state=completed]:bg-primary data-[state=active]:text-primary-foreground data-[state=completed]:text-primary-foreground\",\r\n                outline: \"border-2 border-muted text-muted-foreground data-[state=active]:bg-primary data-[state=completed]:bg-primary data-[state=active]:border-primary data-[state=completed]:border-primary data-[state=active]:text-primary-foreground data-[state=completed]:text-primary-foreground bg-transparent\",\r\n                dotted: \"border-2 border-dotted border-muted text-muted-foreground data-[state=active]:bg-primary data-[state=completed]:bg-primary data-[state=active]:border-primary data-[state=completed]:border-primary data-[state=active]:text-primary-foreground data-[state=completed]:text-primary-foreground bg-transparent\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            variant: \"default\",\r\n        },\r\n    },\r\n);\r\n\r\ntype StepperContextValue = {\r\n    activeStep: number;\r\n    setActiveStep: (step: number) => void;\r\n    orientation: \"horizontal\" | \"vertical\";\r\n    variant?: VariantProps<typeof stepperVariants>[\"variant\"];\r\n    separatorWidth?: string;\r\n};\r\n\r\ntype StepItemContextValue = {\r\n    step: number;\r\n    state: StepState;\r\n    isDisabled: boolean;\r\n    isLoading: boolean;\r\n};\r\n\r\ntype StepState = \"active\" | \"completed\" | \"inactive\" | \"loading\";\r\n\r\nconst StepperContext = React.createContext<StepperContextValue | undefined>(undefined);\r\nconst StepItemContext = React.createContext<StepItemContextValue | undefined>(undefined);\r\n\r\nconst useStepper = () => {\r\n    const context = React.useContext(StepperContext);\r\n    if (!context) throw new Error(\"useStepper must be used within a Stepper\");\r\n    return context;\r\n};\r\n\r\nconst useStepItem = () => {\r\n    const context = React.useContext(StepItemContext);\r\n    if (!context) throw new Error(\"useStepItem must be used within a StepperItem\");\r\n    return context;\r\n};\r\n\r\ninterface StepperProps\r\n    extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof stepperVariants> {\r\n    defaultValue?: number;\r\n    value?: number;\r\n    separatorWidth?: number;\r\n    onValueChange?: (value: number) => void;\r\n}\r\n\r\nconst StepperComponent = React.forwardRef<HTMLDivElement, StepperProps>(\r\n    (\r\n        {\r\n            defaultValue = 0,\r\n            value,\r\n            separatorWidth = 50,\r\n            onValueChange,\r\n            variant,\r\n            orientation = \"horizontal\",\r\n            className,\r\n            ...props\r\n        },\r\n        ref\r\n    ) => {\r\n        const [activeStep, setInternalStep] = React.useState(defaultValue);\r\n\r\n        const setActiveStep = React.useCallback(\r\n            (step: number) => {\r\n                if (value === undefined) setInternalStep(step);\r\n                onValueChange?.(step);\r\n            },\r\n            [value, onValueChange]\r\n        );\r\n\r\n        const currentStep = value ?? activeStep;\r\n\r\n        const contextValue: StepperContextValue = {\r\n            activeStep: currentStep,\r\n            setActiveStep,\r\n            orientation: orientation ?? \"horizontal\",\r\n            separatorWidth: `${separatorWidth}px`,\r\n            variant,\r\n        };\r\n\r\n        return (\r\n            <StepperContext.Provider value={contextValue}>\r\n                <div\r\n                    ref={ref}\r\n                    data-slot=\"stepper\"\r\n                    className={cn(stepperVariants({ variant, orientation }), className)}\r\n                    data-orientation={orientation}\r\n                    {...props}\r\n                />\r\n            </StepperContext.Provider>\r\n        );\r\n    }\r\n);\r\nStepperComponent.displayName = \"Stepper\";\r\n\r\ninterface StepperItemProps extends React.HTMLAttributes<HTMLDivElement> {\r\n    step: number;\r\n    completed?: boolean;\r\n    disabled?: boolean;\r\n    loading?: boolean;\r\n}\r\n\r\nconst StepperItem = React.forwardRef<HTMLDivElement, StepperItemProps>(\r\n    (\r\n        { step, completed = false, disabled = false, loading = false, className, children, ...props },\r\n        ref\r\n    ) => {\r\n        const { activeStep, orientation } = useStepper();\r\n        const state: StepState = completed || step < activeStep ? \"completed\" : activeStep === step ? \"active\" : \"inactive\";\r\n        const isLoading = loading && step === activeStep;\r\n\r\n        return (\r\n            <StepItemContext.Provider value={{ step, state, isDisabled: disabled, isLoading }}>\r\n                <div\r\n                    ref={ref}\r\n                    data-slot=\"stepper-item\"\r\n                    className={cn(stepperItemVariants({ orientation }), className)}\r\n                    data-state={state}\r\n                    {...(isLoading ? { \"data-loading\": true } : {})}\r\n                    {...props}\r\n                >\r\n                    {children}\r\n                </div>\r\n            </StepItemContext.Provider>\r\n        );\r\n    }\r\n);\r\nStepperItem.displayName = \"StepperItem\";\r\n\r\ninterface StepperTriggerProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n    asChild?: boolean;\r\n}\r\n\r\nconst StepperTrigger = React.forwardRef<HTMLButtonElement, StepperTriggerProps>(\r\n    ({ asChild = false, className, children, ...props }, ref) => {\r\n        const { setActiveStep } = useStepper();\r\n        const { step, isDisabled } = useStepItem();\r\n\r\n        const Comp = asChild ? Slot : \"button\";\r\n\r\n        return (\r\n            <Comp\r\n                ref={ref as any}\r\n                data-slot=\"stepper-trigger\"\r\n                className={cn(\r\n                    !asChild &&\r\n                    \"focus-visible:border-ring focus-visible:ring-ring/50 inline-flex items-center gap-3 rounded-full outline-none focus-visible:z-10 focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50\",\r\n                    className\r\n                )}\r\n                {...(!asChild ? { onClick: () => setActiveStep(step), disabled: isDisabled } : {})}\r\n                {...props}\r\n            >\r\n                {children}\r\n            </Comp>\r\n        );\r\n    }\r\n);\r\nStepperTrigger.displayName = \"StepperTrigger\";\r\n\r\ninterface StepperIndicatorProps extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'style'>, VariantProps<typeof indicatorVariants> {\r\n    asChild?: boolean;\r\n}\r\n\r\nconst StepperIndicator = React.forwardRef<HTMLSpanElement, StepperIndicatorProps>(\r\n    ({ asChild = false, className, variant, children, ...props }, ref) => {\r\n        const { state, step, isLoading } = useStepItem();\r\n\r\n        return (\r\n            <span\r\n                ref={ref}\r\n                data-slot=\"stepper-indicator\"\r\n                className={cn(indicatorVariants({ variant }), className)}\r\n                data-state={state}\r\n                {...props}\r\n            >\r\n                {asChild ? (\r\n                    children\r\n                ) : (\r\n                    <>\r\n                        <span className=\"transition-all group-data-loading/step:scale-0 group-data-loading/step:opacity-0 group-data-loading/step:transition-none group-data-[state=completed]/step:scale-0 group-data-[state=completed]/step:opacity-0\">\r\n                            {step}\r\n                        </span>\r\n                        <CheckIcon\r\n                            className=\"absolute scale-0 opacity-0 transition-all group-data-[state=completed]/step:scale-100 group-data-[state=completed]/step:opacity-100\"\r\n                            size={16}\r\n                            aria-hidden=\"true\"\r\n                        />\r\n                        {isLoading && (\r\n                            <span className=\"absolute transition-all\">\r\n                                <LoaderCircleIcon className=\"animate-spin\" size={14} aria-hidden=\"true\" />\r\n                            </span>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </span>\r\n        );\r\n    }\r\n);\r\nStepperIndicator.displayName = \"StepperIndicator\";\r\n\r\nconst StepperTitle = React.forwardRef<HTMLHeadingElement, React.HTMLAttributes<HTMLHeadingElement>>(\r\n    ({ className, ...props }, ref) => (\r\n        <h3\r\n            ref={ref}\r\n            data-slot=\"stepper-title\"\r\n            className={cn(\"text-sm font-medium\", className)}\r\n            {...props}\r\n        />\r\n    )\r\n);\r\nStepperTitle.displayName = \"StepperTitle\";\r\n\r\nconst StepperDescription = React.forwardRef<\r\n    HTMLParagraphElement,\r\n    React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => (\r\n    <p\r\n        ref={ref}\r\n        data-slot=\"stepper-description\"\r\n        className={cn(\"text-muted-foreground text-sm\", className)}\r\n        {...props}\r\n    />\r\n));\r\nStepperDescription.displayName = \"StepperDescription\";\r\n\r\nconst StepperSeparator = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\r\n    ({ className, ...props }, ref) => {\r\n        const { orientation, separatorWidth } = useStepper();\r\n        return (\r\n            <div\r\n                ref={ref}\r\n                data-slot=\"stepper-separator\"\r\n                className={cn(\r\n                    \"bg-muted group-data-[state=completed]/step:bg-primary m-1.5\",\r\n                    orientation === \"horizontal\"\r\n                        ? \"h-0.5 flex-1\"\r\n                        : \"w-0.5\",\r\n                    className\r\n                )}\r\n                style={{\r\n                    ...(orientation === \"horizontal\" && { width: separatorWidth }),\r\n                    ...(orientation === \"vertical\" && { height: separatorWidth }),\r\n                }}\r\n                {...props}\r\n            />\r\n        )\r\n    }\r\n);\r\nStepperSeparator.displayName = \"StepperSeparator\";\r\n\r\ntype StepperType = typeof StepperComponent & {\r\n    Item: typeof StepperItem;\r\n    Trigger: typeof StepperTrigger;\r\n    Indicator: typeof StepperIndicator;\r\n    Title: typeof StepperTitle;\r\n    Description: typeof StepperDescription;\r\n    Separator: typeof StepperSeparator;\r\n};\r\n\r\nconst Stepper = StepperComponent as StepperType;\r\n\r\nStepper.Item = StepperItem;\r\nStepper.Trigger = StepperTrigger;\r\nStepper.Indicator = StepperIndicator;\r\nStepper.Title = StepperTitle;\r\nStepper.Description = StepperDescription;\r\nStepper.Separator = StepperSeparator;\r\n\r\nexport { Stepper };",
      "path": "components/extendui/stepper.tsx",
      "target": "components/extendui/stepper.tsx",
      "type": "registry:ui"
    }
  ]
}
