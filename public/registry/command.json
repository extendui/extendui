{
  "name": "command",
  "type": "registry:ui",
  "dependencies": ["@radix-ui/react-dialog", "@radix-ui/react-icons", "cmdk"],
  "files": [
    {
      "content": "\"use client\"\r\n\r\nimport { DialogTitle, type DialogProps } from \"@radix-ui/react-dialog\"\r\nimport { Command as CommandPrimitive } from \"cmdk\"\r\nimport { Search } from \"lucide-react\"\r\nimport * as React from \"react\"\r\n\r\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst CommandRoot = React.forwardRef<\r\n    React.ElementRef<typeof CommandPrimitive>,\r\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive>\r\n>(({ className, ...props }, ref) => (\r\n    <CommandPrimitive\r\n        ref={ref}\r\n        className={cn(\r\n            \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\r\n            className\r\n        )}\r\n        {...props}\r\n    />\r\n))\r\nCommandRoot.displayName = CommandPrimitive.displayName\r\n\r\ninterface CommandDialogProps extends DialogProps { }\r\n\r\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\r\n    return (\r\n        <Dialog {...props}>\r\n            <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\r\n                <DialogTitle>\r\n                    <CommandRoot className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\r\n                        {children}\r\n                    </CommandRoot>\r\n                </DialogTitle>\r\n            </DialogContent>\r\n        </Dialog>\r\n    )\r\n}\r\nCommandDialog.displayName = \"Command.Dialog\"\r\n\r\nconst CommandInput = React.forwardRef<\r\n    React.ElementRef<typeof CommandPrimitive.Input>,\r\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\r\n>(({ className, ...props }, ref) => (\r\n    <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\r\n        <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\r\n        <CommandPrimitive.Input\r\n            ref={ref}\r\n            className={cn(\r\n                \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-hidden placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    </div>\r\n))\r\nCommandInput.displayName = CommandPrimitive.Input.displayName\r\n\r\nconst CommandList = React.forwardRef<\r\n    React.ElementRef<typeof CommandPrimitive.List>,\r\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\r\n>(({ className, ...props }, ref) => (\r\n    <CommandPrimitive.List\r\n        ref={ref}\r\n        className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\r\n        {...props}\r\n    />\r\n))\r\nCommandList.displayName = CommandPrimitive.List.displayName\r\n\r\nconst CommandEmpty = React.forwardRef<\r\n    React.ElementRef<typeof CommandPrimitive.Empty>,\r\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\r\n>((props, ref) => (\r\n    <CommandPrimitive.Empty\r\n        ref={ref}\r\n        className=\"py-6 text-center text-sm\"\r\n        {...props}\r\n    />\r\n))\r\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\r\n\r\nconst CommandGroup = React.forwardRef<\r\n    React.ElementRef<typeof CommandPrimitive.Group>,\r\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\r\n>(({ className, ...props }, ref) => (\r\n    <CommandPrimitive.Group\r\n        ref={ref}\r\n        className={cn(\r\n            \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\r\n            className\r\n        )}\r\n        {...props}\r\n    />\r\n))\r\nCommandGroup.displayName = CommandPrimitive.Group.displayName\r\n\r\nconst CommandSeparator = React.forwardRef<\r\n    React.ElementRef<typeof CommandPrimitive.Separator>,\r\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\r\n>(({ className, ...props }, ref) => (\r\n    <CommandPrimitive.Separator\r\n        ref={ref}\r\n        className={cn(\"-mx-1 h-px bg-border\", className)}\r\n        {...props}\r\n    />\r\n))\r\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\r\n\r\nconst CommandItem = React.forwardRef<\r\n    React.ElementRef<typeof CommandPrimitive.Item>,\r\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\r\n>(({ className, ...props }, ref) => (\r\n    <CommandPrimitive.Item\r\n        ref={ref}\r\n        className={cn(\r\n            \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-hidden data-[disabled=true]:pointer-events-none data-[selected='true']:bg-primary data-[selected=true]:text-primary-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\r\n            className\r\n        )}\r\n        {...props}\r\n    />\r\n))\r\nCommandItem.displayName = CommandPrimitive.Item.displayName\r\n\r\nconst CommandShortcut = ({\r\n    className,\r\n    ...props\r\n}: React.HTMLAttributes<HTMLSpanElement>) => {\r\n    return (\r\n        <span\r\n            className={cn(\r\n                \"ml-auto text-xs tracking-widest text-muted-foreground\",\r\n                className\r\n            )}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\nCommandShortcut.displayName = \"CommandShortcut\"\r\n\r\nconst Command = Object.assign(CommandRoot, {\r\n    Dialog: CommandDialog,\r\n    Input: CommandInput,\r\n    List: CommandList,\r\n    Empty: CommandEmpty,\r\n    Group: CommandGroup,\r\n    Item: CommandItem,\r\n    Shortcut: CommandShortcut,\r\n    Separator: CommandSeparator,\r\n})\r\n\r\nexport { Command }",
      "path": "components/extendui/command.tsx",
      "target": "components/extendui/command.tsx",
      "type": "registry:ui"
    },
    {
      "type": "registry:ui",
      "content": "\"use client\"\r\n\r\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\r\nimport { Cross2Icon } from \"@radix-ui/react-icons\"\r\nimport * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\n\r\nconst Dialog = DialogPrimitive.Root\r\n\r\nconst DialogTrigger = DialogPrimitive.Trigger\r\n\r\nconst DialogPortal = DialogPrimitive.Portal\r\n\r\nconst DialogClose = DialogPrimitive.Close\r\n\r\nconst DialogOverlay = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Overlay\r\n    ref={ref}\r\n    className={cn(\r\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\r\n\r\nconst DialogContent = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\r\n>(({ className, children, ...props }, ref) => (\r\n  <DialogPortal>\r\n    <DialogOverlay />\r\n    <DialogPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\r\n        <Cross2Icon className=\"h-4 w-4\" />\r\n        <span className=\"sr-only\">Close</span>\r\n      </DialogPrimitive.Close>\r\n    </DialogPrimitive.Content>\r\n  </DialogPortal>\r\n))\r\nDialogContent.displayName = DialogPrimitive.Content.displayName\r\n\r\nconst DialogHeader = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\r\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n)\r\nDialogHeader.displayName = \"DialogHeader\"\r\n\r\nconst DialogFooter = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\r\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n)\r\nDialogFooter.displayName = \"DialogFooter\"\r\n\r\nconst DialogTitle = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Title>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Title\r\n    ref={ref}\r\n    className={cn(\r\n      \"text-lg font-semibold leading-none tracking-tight\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nDialogTitle.displayName = DialogPrimitive.Title.displayName\r\n\r\nconst DialogDescription = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Description>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Description\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nDialogDescription.displayName = DialogPrimitive.Description.displayName\r\n\r\nexport {\r\n  Dialog,\r\n  DialogPortal,\r\n  DialogOverlay,\r\n  DialogTrigger,\r\n  DialogClose,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogFooter,\r\n  DialogTitle,\r\n  DialogDescription,\r\n}\r\n",
      "path": "components/ui/dialog.tsx",
      "target": "components/ui/dialog.tsx"
    }
  ]
}
