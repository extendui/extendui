{
  "name": "select-01",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-select",
    "@radix-ui/react-icons"
  ],
  "files": [
    {
      "content": "'use client';\r\n\r\nimport {\r\n    Select,\r\n} from '@/components/extendui/select';\r\n\r\nexport const SelectDemo = () => {\r\n    return (\r\n        <div>\r\n            <Select >\r\n                <Select.Trigger\r\n                    className=\"min-w-[160px]\"\r\n                >\r\n                    <Select.Value placeholder={'Fruits'} />\r\n                </Select.Trigger>\r\n                <Select.Content>\r\n                    <Select.Group >\r\n                        <Select.Label>Fruits</Select.Label>\r\n                        <Select.Item value=\"apple\">Apple</Select.Item>\r\n                        <Select.Item value=\"banana\">Banana</Select.Item>\r\n                        <Select.Item value=\"blueberry\">Blueberry</Select.Item>\r\n                        <Select.Item value=\"grapes\">Grapes</Select.Item>\r\n                        <Select.Item value=\"pineapple\">Pineapple</Select.Item>\r\n                    </Select.Group>\r\n                </Select.Content>\r\n                <Select.HelperText>\r\n                    {'Helper text'}\r\n                </Select.HelperText>\r\n            </Select>\r\n        </div>\r\n    );\r\n}\r\n\r\n",
      "path": "components/extendui/demo/select-01.tsx",
      "target": "components/extendui/demo/select-01.tsx",
      "type": "registry:ui"
    },
    {
      "content": "'use client';\r\n\r\nimport {\r\n  CaretSortIcon,\r\n  CheckIcon,\r\n  ChevronDownIcon,\r\n  ChevronUpIcon,\r\n} from '@radix-ui/react-icons';\r\nimport * as SelectPrimitive from '@radix-ui/react-select';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\nimport * as React from 'react';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst selectVariants = cva(\r\n  'flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-xs ring-offset-background placeholder:text-muted-foreground focus:outline-hidden focus:ring-0 focus:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: 'border-select',\r\n        filled: 'border-transparent bg-muted',\r\n        flushed: 'rounded-none border-x-0 border-t-0 outline-hidden',\r\n        flushedfilled: 'rounded-none border-x-0 border-t-0 outline-hidden',\r\n        dashed: 'border-dashed border-2',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n    },\r\n  },\r\n);\r\n\r\nconst selectContentVariants = cva(\r\n  'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: 'border-select',\r\n        filled: 'border-transparent bg-muted',\r\n        flushed: 'rounded-none border-x-0 border-t-0 outline-hidden',\r\n        flushedfilled: 'rounded-none border-x-0 border-t-0 outline-hidden',\r\n        dashed: 'border-dashed border-2',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n    },\r\n  },\r\n);\r\n\r\ntype SelectContextType = {\r\n  variant?: VariantProps<typeof selectVariants>['variant'];\r\n  error?: boolean;\r\n  disabled?: boolean;\r\n};\r\n\r\nconst SelectContext = React.createContext<SelectContextType | undefined>(undefined);\r\n\r\nconst useSelectContext = () => {\r\n  const context = React.useContext(SelectContext);\r\n  if (!context) {\r\n    throw new Error(\r\n      'Select compound components must be used within a Select component',\r\n    );\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface SelectProps extends React.ComponentProps<typeof SelectPrimitive.Root>,\r\n  VariantProps<typeof selectVariants> {\r\n  error?: boolean;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst SelectComponent = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Root>,\r\n  SelectProps\r\n>(({ children, variant, error, disabled, ...props }, ref) => {\r\n  const contextValue: SelectContextType = {\r\n    variant,\r\n    error,\r\n    disabled,\r\n  };\r\n\r\n  return (\r\n    <SelectContext.Provider value={contextValue}>\r\n      <SelectPrimitive.Root disabled={disabled} {...props}>\r\n        {children}\r\n      </SelectPrimitive.Root>\r\n    </SelectContext.Provider>\r\n  );\r\n});\r\nSelectComponent.displayName = 'Select';\r\n\r\nconst SelectTrigger = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger> & {\r\n    openIcon?: React.ReactNode;\r\n    icon?: React.ReactNode;\r\n    leftText?: string;\r\n  }\r\n>(({ className, children, openIcon = <CaretSortIcon />, icon, leftText, ...props }, ref) => {\r\n  const { variant, error, disabled } = useSelectContext();\r\n\r\n  return (\r\n    <SelectPrimitive.Trigger\r\n      ref={ref}\r\n      className={cn(\r\n        selectVariants({ variant }),\r\n        className,\r\n        error && [\r\n          'border-red-500 text-red-500',\r\n          !['flushedfilled', 'flushed'].includes(variant as string) && 'focus:outline-red-500'\r\n        ],\r\n        disabled && 'cursor-not-allowed opacity-50',\r\n        icon && 'relative ps-9',\r\n      )}\r\n      {...props}\r\n    >\r\n      {icon && (\r\n        <div className={cn(\r\n          \"pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 text-primary\",\r\n          error && 'text-red-500',\r\n        )}>\r\n          {icon}\r\n        </div>\r\n      )}\r\n      {leftText ? (\r\n        <span className={cn(error && 'text-red-500')}>\r\n          {`${leftText} `}{children}\r\n        </span>\r\n      ) : (\r\n        children\r\n      )}\r\n      <SelectPrimitive.Icon asChild>\r\n        {openIcon}\r\n      </SelectPrimitive.Icon>\r\n    </SelectPrimitive.Trigger>\r\n  );\r\n});\r\nSelectTrigger.displayName = 'SelectTrigger';\r\n\r\nconst SelectScrollUpButton = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.ScrollUpButton\r\n    ref={ref}\r\n    className={cn('flex cursor-default items-center justify-center py-1', className)}\r\n    {...props}\r\n  >\r\n    <ChevronUpIcon />\r\n  </SelectPrimitive.ScrollUpButton>\r\n));\r\nSelectScrollUpButton.displayName = 'SelectScrollUpButton';\r\n\r\nconst SelectScrollDownButton = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.ScrollDownButton\r\n    ref={ref}\r\n    className={cn('flex cursor-default items-center justify-center py-1', className)}\r\n    {...props}\r\n  >\r\n    <ChevronDownIcon />\r\n  </SelectPrimitive.ScrollDownButton>\r\n));\r\nSelectScrollDownButton.displayName = 'SelectScrollDownButton';\r\n\r\nconst SelectContent = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content> & {\r\n    variant?: VariantProps<typeof selectContentVariants>['variant'];\r\n  }\r\n>(({ className, children, position = 'popper', variant: contentVariant, ...props }, ref) => {\r\n  const { variant: rootVariant } = useSelectContext();\r\n  const effectiveVariant = contentVariant || rootVariant;\r\n\r\n  return (\r\n    <SelectPrimitive.Portal>\r\n      <SelectPrimitive.Content\r\n        ref={ref}\r\n        className={cn(\r\n          selectContentVariants({ variant: effectiveVariant }),\r\n          position === 'popper' &&\r\n          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\r\n          className,\r\n        )}\r\n        position={position}\r\n        {...props}\r\n      >\r\n        <SelectScrollUpButton />\r\n        <SelectPrimitive.Viewport\r\n          className={cn(\r\n            'p-1',\r\n            position === 'popper' &&\r\n            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]',\r\n          )}\r\n        >\r\n          {children}\r\n        </SelectPrimitive.Viewport>\r\n        <SelectScrollDownButton />\r\n      </SelectPrimitive.Content>\r\n    </SelectPrimitive.Portal>\r\n  );\r\n});\r\nSelectContent.displayName = 'SelectContent';\r\n\r\nconst SelectLabel = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Label>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.Label\r\n    ref={ref}\r\n    className={cn('px-2 py-1.5 text-sm font-semibold', className)}\r\n    {...props}\r\n  />\r\n));\r\nSelectLabel.displayName = 'SelectLabel';\r\n\r\nconst SelectItem = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\r\n>(({ className, children, ...props }, ref) => (\r\n  <SelectPrimitive.Item\r\n    ref={ref}\r\n    className={cn(\r\n      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-hidden focus:bg-secondary focus:text-secondary-foreground data-disabled:pointer-events-none data-disabled:opacity-50',\r\n      className,\r\n    )}\r\n    {...props}\r\n  >\r\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\r\n      <SelectPrimitive.ItemIndicator>\r\n        <CheckIcon className=\"h-4 w-4\" />\r\n      </SelectPrimitive.ItemIndicator>\r\n    </span>\r\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\r\n  </SelectPrimitive.Item>\r\n));\r\nSelectItem.displayName = 'SelectItem';\r\n\r\nconst SelectSeparator = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Separator>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.Separator\r\n    ref={ref}\r\n    className={cn('-mx-1 my-1 h-px bg-muted', className)}\r\n    {...props}\r\n  />\r\n));\r\nSelectSeparator.displayName = 'SelectSeparator';\r\n\r\nconst SelectHelperText = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => {\r\n  const { error } = useSelectContext();\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      className={cn(\r\n        'mt-2 text-xs text-muted-foreground',\r\n        error && 'text-red-500',\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nSelectHelperText.displayName = 'SelectHelperText';\r\n\r\ntype SelectType = typeof SelectComponent & {\r\n  Group: typeof SelectPrimitive.Group;\r\n  Value: typeof SelectPrimitive.Value;\r\n  Icon: typeof SelectPrimitive.Icon;\r\n  Trigger: typeof SelectTrigger;\r\n  Content: typeof SelectContent;\r\n  Label: typeof SelectLabel;\r\n  Item: typeof SelectItem;\r\n  Separator: typeof SelectSeparator;\r\n  ScrollUpButton: typeof SelectScrollUpButton;\r\n  ScrollDownButton: typeof SelectScrollDownButton;\r\n  HelperText: typeof SelectHelperText;\r\n};\r\n\r\nconst Select = SelectComponent as SelectType;\r\n\r\nSelect.Group = SelectPrimitive.Group;\r\nSelect.Value = SelectPrimitive.Value;\r\nSelect.Icon = SelectPrimitive.Icon;\r\nSelect.Trigger = SelectTrigger;\r\nSelect.Content = SelectContent;\r\nSelect.Label = SelectLabel;\r\nSelect.Item = SelectItem;\r\nSelect.Separator = SelectSeparator;\r\nSelect.ScrollUpButton = SelectScrollUpButton;\r\nSelect.ScrollDownButton = SelectScrollDownButton;\r\nSelect.HelperText = SelectHelperText;\r\n\r\nexport { Select };",
      "path": "components/extendui/select.tsx",
      "target": "components/extendui/select.tsx",
      "type": "registry:ui"
    }
  ]
}