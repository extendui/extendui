{
  "name": "calendar",
  "type": "registry:ui",
  "dependencies": [
    "react-day-picker"
  ],
  "files": [
    {
      "content": "'use client';\r\n\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\nimport * as React from 'react';\r\nimport { DayPicker } from 'react-day-picker';\r\n\r\nimport { buttonVariants } from '@/components/extendui/button';\r\nimport { cn } from '@/lib/utils';\r\n\r\n\r\n\r\nconst calendarVariants = cva('p-3', {\r\n  variants: {\r\n    variant: {\r\n      default: '',\r\n      glowingRing:\r\n        'relative overflow-hidden ring-2 ring-primary/50 animate-glow transition-all',\r\n      outline: 'border-2  border-md shadow-sm',\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: 'default',\r\n  },\r\n});\r\n\r\nexport type CalendarProps = React.ComponentProps<typeof DayPicker> &\r\n  VariantProps<typeof calendarVariants>;\r\n\r\nfunction Calendar({\r\n  className,\r\n  classNames,\r\n  showOutsideDays = true,\r\n  variant,\r\n  month,\r\n  onMonthChange,\r\n  ...props\r\n}: CalendarProps) {\r\n\r\n\r\n  return (\r\n    <DayPicker\r\n      month={month}\r\n      onMonthChange={onMonthChange}\r\n      showOutsideDays={showOutsideDays}\r\n      className={cn(calendarVariants({ variant }), className)}\r\n      classNames={{\r\n        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',\r\n        month: 'space-y-4',\r\n        caption: 'flex justify-center pt-1 relative items-center',\r\n        caption_label: 'text-sm font-medium',\r\n        nav: 'space-x-1 flex items-center',\r\n        nav_button: cn(\r\n          buttonVariants({ variant: 'outline' }),\r\n          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100',\r\n        ),\r\n        nav_button_previous: 'absolute left-1',\r\n        nav_button_next: 'absolute right-1',\r\n        table: 'w-full border-collapse space-y-1',\r\n        head_row: 'flex',\r\n        head_cell:\r\n          'text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]',\r\n        row: 'flex w-full mt-2',\r\n        cell: cn(\r\n          'relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md',\r\n          props.mode === 'range'\r\n            ? '[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md'\r\n            : '[&:has([aria-selected])]:rounded-md',\r\n        ),\r\n        day: cn(\r\n          buttonVariants({ variant: 'ghost' }),\r\n          'h-8 w-8 p-0 font-normal aria-selected:opacity-100',\r\n        ),\r\n        day_range_start: 'day-range-start',\r\n        day_range_end: 'day-range-end',\r\n        day_selected:\r\n          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',\r\n        day_today:\r\n          'text-accent-foreground bg-muted relative after:absolute after:bottom-1 after:left-1/2 after:-translate-x-1/2 after:w-1 after:h-1 after:bg-accent-foreground after:rounded-full',\r\n        day_outside:\r\n          'day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground',\r\n        day_disabled: 'text-muted-foreground opacity-50',\r\n        day_range_middle:\r\n          'aria-selected:bg-accent aria-selected:text-accent-foreground',\r\n        day_hidden: 'invisible',\r\n        ...classNames,\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\nCalendar.displayName = 'Calendar';\r\n\r\nexport { Calendar, calendarVariants };",
      "path": "components/extendui/calendar.tsx",
      "target": "components/extendui/calendar.tsx",
      "type": "registry:ui"
    },
    {
      "content": "import { Slot } from '@radix-ui/react-slot';\r\nimport { Tooltip } from '@radix-ui/react-tooltip';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\nimport { Loader2 } from 'lucide-react';\r\nimport * as React from 'react';\r\n\r\nimport {\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from '@/components/ui/tooltip';\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst buttonVariants = cva(\r\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          'bg-primary text-primary-foreground shadow hover:bg-primary/90 transition-all',\r\n        destructive:\r\n          'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90 transition-all',\r\n        outline:\r\n          'border border-input bg-background shadow-sm hover:bg-secondary hover:text-secondary-foreground transition-all',\r\n        secondary:\r\n          'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80 transition-all',\r\n        ghost:\r\n          'hover:bg-secondary hover:text-secondary-foreground transition-all',\r\n        link: 'text-primary underline-offset-4 hover:underline transition-all',\r\n        ringHover:\r\n          'bg-primary text-primary-foreground transition-all duration-300 hover:bg-primary/90 hover:ring-2 hover:ring-primary/80 hover:ring-offset-2 hover:ring-offset-background',\r\n        glowingRing:\r\n          'bg-primary text-primary-foreground relative overflow-hidden ring-2 ring-primary/50 animate-glow transition-all',\r\n        shimmer:\r\n          'bg-gradient-to-r from-primary via-primary/50 to-primary bg-[length:200%_100%] text-primary-foreground animate-shimmer transition-all',\r\n        perimeterShimmer:\r\n          'bg-primary text-primary-foreground relative overflow-hidden before:absolute before:inset-0 before:rounded-md before:border-2 before:border-accent/50 before:bg-transparent before:animate-perimeterShimmer transition-all',\r\n        bouncing:\r\n          'bg-primary text-primary-foreground shadow hover:bg-primary/90 transition-all animate-bounce',\r\n      },\r\n      size: {\r\n        default: 'h-9 px-4 py-2',\r\n        sm: 'h-8 rounded-md px-3 text-xs',\r\n        lg: 'h-10 rounded-md px-8',\r\n        icon: 'h-9 w-9',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n      size: 'default',\r\n    },\r\n  },\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n  VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean;\r\n  loading?: boolean;\r\n  loadingText?: string;\r\n  tooltipText?: string;\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  (\r\n    {\r\n      className,\r\n      variant,\r\n      size,\r\n      asChild = false,\r\n      loading,\r\n      loadingText = 'Processing...',\r\n      tooltipText,\r\n      children,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const Comp = asChild ? Slot : 'button';\r\n    const content = loading ? (\r\n      <>\r\n        {size == 'icon' ? (\r\n          <Loader2 className={cn('animate-spin')} />\r\n        ) : (\r\n          <>\r\n            {loadingText}\r\n            <Loader2 className={cn('ml-2 h-4 w-4 animate-spin')} />\r\n          </>\r\n        )}\r\n      </>\r\n    ) : (\r\n      children\r\n    );\r\n\r\n    return tooltipText ? (\r\n      <TooltipProvider>\r\n        <Tooltip>\r\n          <TooltipTrigger>\r\n            <Comp\r\n              className={cn(buttonVariants({ variant, size, className }))}\r\n              ref={ref}\r\n              disabled={loading}\r\n              {...props}\r\n            >\r\n              {content}\r\n            </Comp>\r\n          </TooltipTrigger>\r\n          <TooltipContent>{tooltipText}</TooltipContent>\r\n        </Tooltip>\r\n      </TooltipProvider>\r\n    ) : (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        disabled={loading}\r\n        {...props}\r\n      >\r\n        {content}\r\n      </Comp>\r\n    );\r\n  },\r\n);\r\nButton.displayName = 'Button';\r\n\r\nexport { Button, buttonVariants };",
      "path": "components/extendui/button.tsx",
      "target": "components/extendui/button.tsx",
      "type": "registry:ui"
    }
  ]
}