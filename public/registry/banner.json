{
  "name": "banner",
  "type": "registry:ui",
  "dependencies": ["@radix-ui/react-slot"],
  "files": [
    {
      "content": "'use client';\r\n\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\nimport { X } from 'lucide-react';\r\nimport * as React from 'react';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst bannerVariants = cva(\r\n    'relative flex w-full items-center text-sm font-medium transition-all',\r\n    {\r\n        variants: {\r\n            variant: {\r\n                default: 'bg-accent text-foreground dark:bg-accent-foreground',\r\n                primary: 'bg-primary text-primary-foreground',\r\n                destructive: 'bg-destructive text-destructive-foreground',\r\n                success: 'bg-green-500 text-white',\r\n                warning: 'bg-amber-500 text-white',\r\n                info: 'bg-blue-500 text-white',\r\n                outline: 'border border-input bg-background',\r\n                subtle: 'bg-muted text-muted-foreground',\r\n                ghost: 'text-foreground',\r\n                shimmer:\r\n                    'animate-shimmer bg-gradient-to-r from-primary via-primary/50 to-primary bg-[length:200%_100%] text-primary-foreground',\r\n            },\r\n            position: {\r\n                top: 'left-0 top-0 w-full',\r\n                bottom: 'bottom-0 left-0 w-full',\r\n                center: 'left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 transform',\r\n                static: 'relative w-full',\r\n            },\r\n            size: {\r\n                default: 'px-4 py-3',\r\n                sm: 'px-3 py-2 text-xs',\r\n                lg: 'px-6 py-4',\r\n            },\r\n            width: {\r\n                default: 'w-full',\r\n                auto: 'w-auto',\r\n                fixed: 'max-w-md',\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            variant: 'default',\r\n            position: 'top',\r\n            size: 'default',\r\n            width: 'default',\r\n        },\r\n    }\r\n);\r\n\r\ntype BannerElementCheck = {\r\n    hasLeftIcon: boolean;\r\n    hasRightIcon: boolean;\r\n    hasDescription: boolean;\r\n    hasDismiss: boolean;\r\n};\r\n\r\ntype BannerContextType = {\r\n    variant?: VariantProps<typeof bannerVariants>['variant'];\r\n    position?: VariantProps<typeof bannerVariants>['position'];\r\n    size?: VariantProps<typeof bannerVariants>['size'];\r\n    width?: VariantProps<typeof bannerVariants>['width'];\r\n    isVisible: boolean;\r\n    link?: string;\r\n    elementChecks: BannerElementCheck;\r\n    handleDismiss: () => void;\r\n};\r\n\r\nconst BannerContext = React.createContext<BannerContextType | undefined>(undefined);\r\n\r\nconst useBannerContext = () => {\r\n    const context = React.useContext(BannerContext);\r\n    if (!context) {\r\n        throw new Error(\r\n            'Banner compound components must be used within a Banner.Root component'\r\n        );\r\n    }\r\n    return context;\r\n};\r\n\r\nconst checkForChildComponent = (children: React.ReactNode, componentType: React.FC<any> | React.ForwardRefExoticComponent<any>) => {\r\n    return React.Children.toArray(children).some((child) =>\r\n        React.isValidElement(child) && child.type === componentType\r\n    );\r\n};\r\n\r\ninterface BannerRootProps\r\n    extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof bannerVariants> {\r\n    link?: string;\r\n    onDismiss?: () => void;\r\n    defaultVisible?: boolean;\r\n    children?: React.ReactNode;\r\n}\r\n\r\nconst BannerRoot = React.forwardRef<HTMLDivElement, BannerRootProps>(\r\n    (\r\n        {\r\n            className,\r\n            variant,\r\n            position,\r\n            size,\r\n            width,\r\n            link,\r\n            onDismiss,\r\n            defaultVisible = true,\r\n            children,\r\n            ...props\r\n        },\r\n        ref\r\n    ) => {\r\n        const [isVisible, setIsVisible] = React.useState(defaultVisible);\r\n\r\n        const handleDismiss = React.useCallback(() => {\r\n            setIsVisible(false);\r\n            onDismiss?.();\r\n        }, [onDismiss]);\r\n\r\n        const elementChecks = React.useMemo<BannerElementCheck>(\r\n            () => ({\r\n                hasLeftIcon: checkForChildComponent(children, BannerLeftIcon),\r\n                hasRightIcon: checkForChildComponent(children, BannerRightIcon),\r\n                hasDescription: checkForChildComponent(children, BannerDescription),\r\n                hasDismiss: checkForChildComponent(children, BannerDismiss),\r\n            }),\r\n            [children]\r\n        );\r\n\r\n        if (!isVisible) return null;\r\n\r\n        const contextValue: BannerContextType = {\r\n            variant,\r\n            position,\r\n            size,\r\n            width,\r\n            isVisible,\r\n            link,\r\n            elementChecks,\r\n            handleDismiss,\r\n        };\r\n\r\n        return (\r\n            <BannerContext.Provider value={contextValue}>\r\n                <div\r\n                    ref={ref}\r\n                    role=\"alert\"\r\n                    className={cn(\r\n                        bannerVariants({ variant, position, size, width }),\r\n                        position !== 'static' && 'absolute z-50',\r\n                        className\r\n                    )}\r\n                    {...props}\r\n                >\r\n                    <div\r\n                        className={cn(\r\n                            'flex w-full items-center justify-between gap-2',\r\n                            elementChecks.hasDismiss && 'pr-8'\r\n                        )}\r\n                    >\r\n                        {children}\r\n                    </div>\r\n                </div>\r\n            </BannerContext.Provider>\r\n        );\r\n    }\r\n);\r\nBannerRoot.displayName = 'Banner';\r\n\r\ninterface BannerIconProps extends React.HTMLAttributes<HTMLSpanElement> {\r\n    children: React.ReactNode;\r\n}\r\n\r\nconst BannerLeftIcon = React.forwardRef<HTMLSpanElement, BannerIconProps>(\r\n    ({ className, children, ...props }, ref) => {\r\n        const { elementChecks } = useBannerContext();\r\n\r\n        return (\r\n            <span\r\n                ref={ref}\r\n                className={cn(\r\n                    'flex flex-shrink-0 items-center',\r\n                    elementChecks.hasDescription ? 'mr-2' : 'mr-4',\r\n                    className\r\n                )}\r\n                aria-hidden=\"true\"\r\n                {...props}\r\n            >\r\n                {children}\r\n            </span>\r\n        );\r\n    }\r\n);\r\nBannerLeftIcon.displayName = 'Banner.LeftIcon';\r\n\r\nconst BannerRightIcon = React.forwardRef<HTMLSpanElement, BannerIconProps>(\r\n    ({ className, children, ...props }, ref) => {\r\n        const { elementChecks } = useBannerContext();\r\n\r\n        return (\r\n            <span\r\n                ref={ref}\r\n                className={cn(\r\n                    'flex flex-shrink-0 items-center',\r\n                    elementChecks.hasDescription ? 'ml-2' : 'ml-4',\r\n                    className\r\n                )}\r\n                aria-hidden=\"true\"\r\n                {...props}\r\n            >\r\n                {children}\r\n            </span>\r\n        );\r\n    }\r\n);\r\nBannerRightIcon.displayName = 'Banner.RightIcon';\r\n\r\ninterface BannerDescriptionProps extends React.HTMLAttributes<HTMLDivElement> {\r\n    position?: 'left' | 'center' | 'right';\r\n    asChild?: boolean;\r\n}\r\n\r\nconst BannerDescription = React.forwardRef<HTMLElement, BannerDescriptionProps>(\r\n    ({ className, position = 'center', asChild = false, children, ...props }, ref) => {\r\n        const { link } = useBannerContext();\r\n\r\n        if (asChild) {\r\n            return (\r\n                <div\r\n                    ref={ref as React.Ref<HTMLDivElement>}\r\n                    className={cn(\r\n                        'flex-1 text-sm',\r\n                        position === 'left' && 'text-left',\r\n                        position === 'center' && 'text-center justify-center',\r\n                        position === 'right' && 'text-right justify-end',\r\n                        className\r\n                    )}\r\n                    {...props}\r\n                >\r\n                    {children}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (link) {\r\n            const validProps = Object.fromEntries(\r\n                Object.entries(props).filter(([key]) => React.isValidElement(key as keyof React.AnchorHTMLAttributes<HTMLAnchorElement>))\r\n            );\r\n\r\n            return (\r\n                <a\r\n                    ref={ref as React.Ref<HTMLAnchorElement>}\r\n                    href={link}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className={cn(\r\n                        'flex-1 cursor-pointer text-sm',\r\n                        position === 'left' && 'text-left',\r\n                        position === 'center' && 'text-center justify-center',\r\n                        position === 'right' && 'text-right justify-end',\r\n                        className\r\n                    )}\r\n                    {...validProps}\r\n                >\r\n                    {children}\r\n                </a>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div\r\n                ref={ref as React.Ref<HTMLDivElement>}\r\n                className={cn(\r\n                    'flex-1 text-sm',\r\n                    position === 'left' && 'text-left',\r\n                    position === 'center' && 'text-center justify-center',\r\n                    position === 'right' && 'text-right justify-end',\r\n                    className\r\n                )}\r\n                {...props}\r\n            >\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n);\r\nBannerDescription.displayName = 'Banner.Description';\r\n\r\ninterface BannerDismissProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n    icon?: React.ReactNode;\r\n}\r\n\r\nconst BannerDismiss = React.forwardRef<HTMLButtonElement, BannerDismissProps>(\r\n    ({ className, onClick, icon = <X size={16} />, ...props }, ref) => {\r\n        const { handleDismiss } = useBannerContext();\r\n\r\n        const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n            event.stopPropagation();\r\n            handleDismiss();\r\n            onClick?.(event);\r\n        };\r\n\r\n        return (\r\n            <button\r\n                ref={ref}\r\n                type=\"button\"\r\n                onClick={handleClick}\r\n                className={cn(\r\n                    'absolute right-2 top-1/2 -translate-y-1/2 rounded-full p-1.5 transition-all',\r\n                    'opacity-70 hover:bg-black/10 hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-offset-2',\r\n                    className\r\n                )}\r\n                aria-label=\"Dismiss\"\r\n                {...props}\r\n            >\r\n                {icon}\r\n            </button>\r\n        );\r\n    }\r\n);\r\nBannerDismiss.displayName = 'Banner.Dismiss';\r\n\r\nconst Banner = Object.assign(BannerRoot, {\r\n    LeftIcon: BannerLeftIcon,\r\n    RightIcon: BannerRightIcon,\r\n    Description: BannerDescription,\r\n    Dismiss: BannerDismiss,\r\n});\r\n\r\nexport { Banner, bannerVariants };",
      "path": "components/extendui/banner.tsx",
      "target": "components/extendui/banner.tsx",
      "type": "registry:ui"
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "keyframes": {
            "shimmer": {
              "0%": {
                "backgroundPosition": "200% 0"
              },
              "100%": {
                "backgroundPosition": "-200% 0"
              }
            }
          },
          "animation": {
            "shimmer": "shimmer 3s linear infinite"
          }
        }
      }
    }
  }
}
