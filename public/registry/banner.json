{
  "name": "banner",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "content": "import { Slot } from '@radix-ui/react-slot';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\nimport { ArrowRight, X } from 'lucide-react';\r\nimport * as React from 'react';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst bannerVariants = cva(\r\n    'relative flex items-center justify-center whitespace-nowrap text-sm font-medium transition-all',\r\n    {\r\n        variants: {\r\n            variant: {\r\n                default: 'bg-accent text-foreground dark:bg-accent-foreground',\r\n                primary: 'bg-primary text-primary-foreground',\r\n                destructive: 'bg-destructive text-destructive-foreground',\r\n                success: 'bg-green-500 text-white',\r\n                warning: 'bg-amber-500 text-white',\r\n                info: 'bg-blue-500 text-white',\r\n                outline: 'border border-input bg-background',\r\n                subtle: 'bg-muted text-muted-foreground',\r\n                ghost: 'text-foreground hover:bg-accent hover:text-accent-foreground',\r\n                shimmer: 'bg-gradient-to-r from-primary via-primary/50 to-primary bg-[length:200%_100%] text-primary-foreground animate-shimmer',\r\n            },\r\n            position: {\r\n                top: 'top-0 left-0 w-full',\r\n                bottom: 'bottom-0 left-0 w-full',\r\n                left: 'left-0 top-0 h-full flex-col',\r\n                right: 'right-0 top-0 h-full flex-col',\r\n                center: 'top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 ',\r\n                static: 'relative w-full',\r\n            },\r\n            size: {\r\n                default: 'px-4 py-3',\r\n                sm: 'px-3 py-2 text-xs',\r\n                lg: 'px-6 py-4',\r\n            },\r\n            width: {\r\n                default: 'w-full',\r\n                auto: 'w-auto',\r\n                fixed: '',\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            variant: 'default',\r\n            position: 'top',\r\n            size: 'default',\r\n            width: 'default',\r\n        },\r\n    },\r\n);\r\n\r\nexport interface BannerProps\r\n    extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof bannerVariants> {\r\n    asChild?: boolean;\r\n    title?: string;\r\n    icon?: React.ReactNode;\r\n    link?: string;\r\n    showArrow?: boolean;\r\n    dismissible?: boolean;\r\n    onDismiss?: () => void;\r\n}\r\n\r\nconst Banner = React.forwardRef<HTMLDivElement, BannerProps>(\r\n    (\r\n        {\r\n            className,\r\n            variant,\r\n            position,\r\n            size,\r\n            width,\r\n            asChild = false,\r\n            title = \"Banner component\",\r\n            icon,\r\n            link = \"#\",\r\n            showArrow = true,\r\n            dismissible = false,\r\n            onDismiss,\r\n            children,\r\n            ...props\r\n        },\r\n        ref,\r\n    ) => {\r\n        const Comp = asChild ? Slot : 'div';\r\n        const [isVisible, setIsVisible] = React.useState(true);\r\n\r\n        const handleDismiss = () => {\r\n            setIsVisible(false);\r\n            onDismiss?.();\r\n        };\r\n\r\n        if (!isVisible) {\r\n            return null;\r\n        }\r\n\r\n        const content = children || (\r\n            <p className=\"flex items-center justify-center\">\r\n                {link ? (\r\n                    <a href={link} className=\"group flex items-center\">\r\n                        {icon && <span className=\"me-1 text-base leading-none\">{typeof icon === 'string' ? icon : icon}</span>}\r\n                        {title}\r\n                        {showArrow && (\r\n                            <ArrowRight\r\n                                className=\"-mt-0.5 ms-2 inline-flex opacity-60 transition-transform group-hover:translate-x-0.5\"\r\n                                size={16}\r\n                                strokeWidth={2}\r\n                                aria-hidden=\"true\"\r\n                            />\r\n                        )}\r\n                    </a>\r\n                ) : (\r\n                    <>\r\n                        {icon && <span className=\"me-1 text-base leading-none\">{typeof icon === 'string' ? icon : icon}</span>}\r\n                        {title}\r\n                    </>\r\n                )}\r\n            </p>\r\n        );\r\n\r\n        return (\r\n            <Comp\r\n                className={cn(\r\n                    bannerVariants({ variant, position, size, width, className }),\r\n                    width === 'fixed' ? 'max-w-md' : '',\r\n                    position !== 'static' ? 'absolute' : '',\r\n                )}\r\n                ref={ref}\r\n                {...props}\r\n            >\r\n                {content}\r\n                {dismissible && (\r\n                    <button\r\n                        onClick={handleDismiss}\r\n                        className=\"absolute right-2 top-1/2 -translate-y-1/2 rounded-full p-1 opacity-70 hover:bg-black/10 hover:opacity-100\"\r\n                        aria-label=\"Dismiss\"\r\n                    >\r\n                        <X size={16} />\r\n                    </button>\r\n                )}\r\n            </Comp>\r\n        );\r\n    },\r\n);\r\nBanner.displayName = 'Banner';\r\n\r\nexport { Banner, bannerVariants };",
      "path": "components/extendui/banner.tsx",
      "target": "components/extendui/banner.tsx",
      "type": "registry:ui"
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "keyframes": {
            "shimmer": {
              "0%": {
                "backgroundPosition": "200% 0"
              },
              "100%": {
                "backgroundPosition": "-200% 0"
              }
            }
          },
          "animation": {
            "shimmer": "shimmer 3s linear infinite"
          }
        }
      }
    }
  }
}