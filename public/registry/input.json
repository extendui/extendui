{
  "name": "input",
  "type": "registry:ui",
  "dependencies": [],
  "files": [
    {
      "content": "'use client';\r\n\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\nimport { Eye, EyeOff, X } from 'lucide-react';\r\nimport * as React from 'react';\r\n\r\nimport { hasNestedElementOfType } from '@/helpers/hasNestedElementOfType';\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst inputVariants = cva(\r\n  'h-9 w-full rounded-md border border-input bg-background py-2 text-sm transition-all disabled:cursor-not-allowed disabled:opacity-50 placeholder:text-muted-foreground',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: 'border-input focus:outline-primary',\r\n        filled: 'border-transparent bg-muted focus:outline-primary',\r\n        flushed:\r\n          'rounded-none border-x-0 border-t-0 outline-none focus:outline-none focus:ring-0 focus:ring-offset-0 focus:bg-secondary focus-visible:outline-none',\r\n        flushedfilled:\r\n          'rounded-none border-x-0 border-t-0 outline-none focus:outline-none focus:ring-0 focus:ring-offset-0 focus:bg-secondary',\r\n        dashed: 'border-dashed border-2 focus:outline-primary',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n    },\r\n  },\r\n);\r\n\r\ntype InputContextType = {\r\n  id: string;\r\n  disabled?: boolean;\r\n  error?: boolean;\r\n  isFocused: boolean;\r\n  showPassword: boolean;\r\n  required?: boolean;\r\n  value?: string | number | readonly string[];\r\n  maxLength?: number;\r\n  variant?: VariantProps<typeof inputVariants>['variant'];\r\n  elementChecks: {\r\n    hasLeftIcon: boolean;\r\n    hasRightIcon: boolean;\r\n    hasLabel: boolean;\r\n    hasPassword: boolean;\r\n    hasClearButton: boolean\r\n  }\r\n  onFocus: (e: React.FocusEvent<HTMLInputElement>) => void;\r\n  onBlur: (e: React.FocusEvent<HTMLInputElement>) => void;\r\n  setShowPassword: (show: boolean) => void;\r\n};\r\n\r\nconst InputContext = React.createContext<InputContextType | undefined>(\r\n  undefined,\r\n);\r\n\r\nconst useInputContext = () => {\r\n  const context = React.useContext(InputContext);\r\n  if (!context) {\r\n    throw new Error(\r\n      'Input compound components must be used within an Input.Root component',\r\n    );\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface InputRootProps\r\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'>,\r\n  VariantProps<typeof inputVariants> {\r\n  error?: boolean;\r\n  textError?: string;\r\n  maxLength?: number;\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst InputComponent = React.forwardRef<HTMLInputElement, InputRootProps>(\r\n  (props, ref) => {\r\n    const {\r\n      className,\r\n      id,\r\n      variant,\r\n      type,\r\n      error,\r\n      textError,\r\n      disabled,\r\n      required,\r\n      value,\r\n      maxLength,\r\n      children,\r\n      onFocus: propOnFocus,\r\n      onBlur: propOnBlur,\r\n      ...inputProps\r\n    } = props;\r\n\r\n    const [isFocused, setIsFocused] = React.useState(false);\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n\r\n    const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\r\n      if (!disabled) {\r\n        setIsFocused(true);\r\n        propOnFocus?.(e);\r\n      }\r\n    };\r\n\r\n    const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\r\n      setIsFocused(false);\r\n      propOnBlur?.(e);\r\n    };\r\n\r\n\r\n    const elementChecks = React.useMemo(() => ({\r\n      hasLeftIcon: hasNestedElementOfType(children, [InputLeftIcon]),\r\n      hasRightIcon: hasNestedElementOfType(children, [InputRightIcon]),\r\n      hasLabel: hasNestedElementOfType(children, [InputLabel]),\r\n      hasPassword: hasNestedElementOfType(children, [InputPasswordToggle]),\r\n      hasClearButton: hasNestedElementOfType(children, [InputClearButton])\r\n    }), [children]);\r\n\r\n    const contextValue: InputContextType = {\r\n      id: id || '',\r\n      disabled,\r\n      error,\r\n      isFocused,\r\n      showPassword,\r\n      value,\r\n      maxLength,\r\n      variant,\r\n      required,\r\n      elementChecks,\r\n      onFocus: handleFocus,\r\n      onBlur: handleBlur,\r\n      setShowPassword,\r\n    };\r\n\r\n    const currentValue = String(value || '');\r\n    const hasValue = currentValue.length > 0;\r\n\r\n    const getCounterPosition = React.useCallback(() => {\r\n      if (elementChecks.hasClearButton && hasValue && elementChecks.hasPassword) return 'right-[3.2rem]';\r\n      if (elementChecks.hasPassword || elementChecks.hasRightIcon) return 'right-8';\r\n      if (elementChecks.hasClearButton && hasValue) return 'right-8';\r\n      return 'right-3';\r\n    }, [elementChecks.hasClearButton, hasValue, elementChecks.hasPassword, elementChecks.hasRightIcon]);\r\n\r\n    const getLabelPadding = React.useCallback(() => {\r\n      if (elementChecks.hasClearButton && hasValue && elementChecks.hasPassword && maxLength) return 'pe-24';\r\n      if ((elementChecks.hasPassword || elementChecks.hasRightIcon) && maxLength) return 'pe-20';\r\n      if (elementChecks.hasClearButton && hasValue && maxLength) return 'pe-20';\r\n      return 'pe-8';\r\n    }, [elementChecks.hasClearButton, hasValue, elementChecks.hasPassword, elementChecks.hasRightIcon, maxLength]);\r\n\r\n    const inputClassName = cn(\r\n      inputVariants({ variant }),\r\n      elementChecks.hasLeftIcon ? 'pl-9' : 'px-3',\r\n      elementChecks.hasLabel && 'placeholder:text-transparent',\r\n      value && variant === 'flushedfilled' && 'bg-secondary',\r\n      error && 'border-red-500',\r\n      error &&\r\n      !['flushedfilled', 'flushed'].includes(variant as string) &&\r\n      'focus:outline-red-500',\r\n      disabled && 'opacity-50 cursor-not-allowed',\r\n      getLabelPadding(),\r\n      className,\r\n    );\r\n\r\n    return (\r\n      <InputContext.Provider value={contextValue}>\r\n        <div className=\"relative\">\r\n          {children}\r\n          <input\r\n            ref={ref}\r\n            type={type === 'password' && showPassword ? 'text' : type}\r\n            className={inputClassName}\r\n            disabled={disabled}\r\n            onFocus={handleFocus}\r\n            onBlur={handleBlur}\r\n            value={value}\r\n            maxLength={maxLength}\r\n            {...inputProps}\r\n          />\r\n          {maxLength && (\r\n            <div className={cn(\r\n              \"absolute top-2.5 text-xs text-muted-foreground\",\r\n              getCounterPosition()\r\n            )}>\r\n              {currentValue.length}/{maxLength}\r\n            </div>\r\n          )}\r\n          {error && textError && (\r\n            <p className=\"mt-1 text-xs text-red-500\">{textError}</p>\r\n          )}\r\n        </div>\r\n      </InputContext.Provider>\r\n    );\r\n  },\r\n);\r\nInputComponent.displayName = 'InputComponent';\r\n\r\n\r\ntype InputType = typeof InputComponent & {\r\n  Group: typeof InputGroup;\r\n  Label: typeof InputLabel;\r\n  LeftIcon: typeof InputLeftIcon;\r\n  RightIcon: typeof InputRightIcon;\r\n  PasswordToggle: typeof InputPasswordToggle;\r\n  ClearButton: typeof InputClearButton;\r\n};\r\n\r\nconst Input = InputComponent as InputType;\r\n\r\nconst InputGroup = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>((props, ref) => (\r\n  <div ref={ref} className={cn('relative', props.className)} {...props} />\r\n));\r\nInputGroup.displayName = 'InputGroup';\r\n\r\nconst InputLabel = React.forwardRef<\r\n  HTMLLabelElement,\r\n  React.LabelHTMLAttributes<HTMLLabelElement>\r\n>((props, ref) => {\r\n  const { className, children, ...rest } = props;\r\n  const {\r\n    id,\r\n    isFocused,\r\n    required,\r\n    value,\r\n    disabled,\r\n    error,\r\n    variant,\r\n    elementChecks,\r\n  } = useInputContext();\r\n\r\n  const labelClassName = cn(\r\n    'absolute top-2 text-sm text-muted-foreground transition-all duration-200 ease-in-out cursor-text border-transparent',\r\n    elementChecks.hasLeftIcon ? 'left-9' : 'left-3',\r\n    isFocused && 'font-medium',\r\n    (isFocused || value) && [\r\n      '-translate-y-[calc(85%)] scale-[0.85] bg-background px-1 text-primary',\r\n      variant === 'flushed' || variant === 'flushedfilled'\r\n        ? `-left-1.5 pl-0`\r\n        : `left-1.5 rounded-md border-2`,\r\n      (variant === 'flushed' ||\r\n        variant === 'filled' ||\r\n        variant === 'flushedfilled') &&\r\n      '-translate-y-[calc(95%)]',\r\n    ],\r\n    error && 'text-red-500',\r\n    disabled && 'opacity-50 cursor-not-allowed',\r\n    required && `after:content-['*'] after:ml-0.5 after:text-red-500`,\r\n    className,\r\n  );\r\n\r\n  return (\r\n    <label ref={ref} htmlFor={id} className={labelClassName} {...rest}>\r\n      {children}\r\n    </label>\r\n  );\r\n});\r\nInputLabel.displayName = 'InputLabel';\r\n\r\nconst InputLeftIcon = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>((props, ref) => {\r\n  const { className, children, ...rest } = props;\r\n  const { disabled, error } = useInputContext();\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      className={cn(\r\n        'absolute left-3 top-2.5 flex h-4 w-4 items-center',\r\n        disabled && 'opacity-50',\r\n        error && 'text-red-500',\r\n        className,\r\n      )}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n});\r\nInputLeftIcon.displayName = 'InputLeftIcon';\r\n\r\nconst InputRightIcon = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>((props, ref) => {\r\n  const { className, children, ...rest } = props;\r\n  const { disabled, error, elementChecks } = useInputContext();\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      className={cn(\r\n        'absolute right-3 top-2.5 flex h-4 w-4 items-center',\r\n        disabled && 'opacity-50',\r\n        error && 'text-red-500',\r\n        elementChecks.hasPassword && 'hidden',\r\n        className,\r\n      )}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n});\r\nInputRightIcon.displayName = 'InputRightIcon';\r\n\r\nconst InputPasswordToggle = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ButtonHTMLAttributes<HTMLButtonElement>\r\n>((props, ref) => {\r\n  const { className, ...rest } = props;\r\n  const { showPassword, setShowPassword } = useInputContext();\r\n\r\n  return (\r\n    <button\r\n      ref={ref}\r\n      type=\"button\"\r\n      className={cn('absolute right-3 top-2.5 flex items-center', className)}\r\n      onClick={() => setShowPassword(!showPassword)}\r\n      {...rest}\r\n    >\r\n      {showPassword ? (\r\n        <EyeOff className=\"h-4 w-4\" />\r\n      ) : (\r\n        <Eye className=\"h-4 w-4\" />\r\n      )}\r\n    </button>\r\n  );\r\n});\r\nInputPasswordToggle.displayName = 'InputPasswordToggle';\r\n\r\nconst InputClearButton = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ButtonHTMLAttributes<HTMLButtonElement>\r\n>((props, ref) => {\r\n  const { className, onClick, ...rest } = props;\r\n  const { value, elementChecks } = useInputContext();\r\n\r\n  if (!value) return null;\r\n\r\n  return (\r\n    <button\r\n      ref={ref}\r\n      type=\"button\"\r\n      className={cn(\r\n        'absolute right-3 top-2.5 flex items-center',\r\n        (elementChecks.hasPassword || elementChecks.hasRightIcon) && 'right-8',\r\n        className,\r\n      )}\r\n      onClick={onClick}\r\n      {...rest}\r\n    >\r\n      <X className=\"h-4 w-4\" />\r\n    </button>\r\n  );\r\n});\r\nInputClearButton.displayName = 'InputClearButton';\r\n\r\nInput.Group = InputGroup;\r\nInput.Label = InputLabel;\r\nInput.LeftIcon = InputLeftIcon;\r\nInput.RightIcon = InputRightIcon;\r\nInput.PasswordToggle = InputPasswordToggle;\r\nInput.ClearButton = InputClearButton;\r\n\r\nexport { Input };\r\n",
      "path": "components/extendui/input.tsx",
      "target": "components/extendui/input.tsx"
    }
  ]
}