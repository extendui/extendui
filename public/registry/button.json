{
  "name": "button",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot",
    "@radix-ui/react-tooltip"
  ],
  "files": [
    {
      "content": "import { Slot } from '@radix-ui/react-slot';\r\nimport { Tooltip } from '@radix-ui/react-tooltip';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\nimport { Loader2 } from 'lucide-react';\r\nimport * as React from 'react';\r\n\r\nimport {\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from '@/components/ui/tooltip';\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst buttonVariants = cva(\r\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          'bg-primary text-primary-foreground shadow hover:bg-primary/90 transition-all',\r\n        destructive:\r\n          'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90 transition-all',\r\n        outline:\r\n          'border border-input bg-background shadow-sm hover:bg-secondary hover:text-secondary-foreground transition-all',\r\n        secondary:\r\n          'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80 transition-all',\r\n        ghost:\r\n          'hover:bg-secondary hover:text-secondary-foreground transition-all',\r\n        link: 'text-primary underline-offset-4 hover:underline transition-all',\r\n        ringHover:\r\n          'bg-primary text-primary-foreground transition-all duration-300 hover:bg-primary/90 hover:ring-2 hover:ring-primary/80 hover:ring-offset-2 hover:ring-offset-background',\r\n        glowingRing:\r\n          'bg-primary text-primary-foreground relative overflow-hidden ring-2 ring-primary/50 animate-glow transition-all',\r\n        shimmer:\r\n          'bg-gradient-to-r from-primary via-primary/50 to-primary bg-[length:200%_100%] text-primary-foreground animate-shimmer transition-all',\r\n        perimeterShimmer:\r\n          'bg-primary text-primary-foreground relative overflow-hidden before:absolute before:inset-0 before:rounded-md before:border-2 before:border-accent/50 before:bg-transparent before:animate-perimeterShimmer transition-all',\r\n        bouncing:\r\n          'bg-primary text-primary-foreground shadow hover:bg-primary/90 transition-all animate-bounce',\r\n      },\r\n      size: {\r\n        default: 'h-9 px-4 py-2',\r\n        sm: 'h-8 rounded-md px-3 text-xs',\r\n        lg: 'h-10 rounded-md px-8',\r\n        icon: 'h-9 w-9',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n      size: 'default',\r\n    },\r\n  },\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n  VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean;\r\n  loading?: boolean;\r\n  loadingText?: string;\r\n  tooltipText?: string;\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  (\r\n    {\r\n      className,\r\n      variant,\r\n      size,\r\n      asChild = false,\r\n      loading,\r\n      loadingText = 'Processing...',\r\n      tooltipText,\r\n      children,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const Comp = asChild ? Slot : 'button';\r\n    const content = loading ? (\r\n      <>\r\n        {size == 'icon' ? (\r\n          <Loader2 className={cn('animate-spin')} />\r\n        ) : (\r\n          <>\r\n            {loadingText}\r\n            <Loader2 className={cn('ml-2 h-4 w-4 animate-spin')} />\r\n          </>\r\n        )}\r\n      </>\r\n    ) : (\r\n      children\r\n    );\r\n\r\n    return tooltipText ? (\r\n      <TooltipProvider>\r\n        <Tooltip>\r\n          <TooltipTrigger>\r\n            <Comp\r\n              className={cn(buttonVariants({ variant, size, className }))}\r\n              ref={ref}\r\n              disabled={loading}\r\n              {...props}\r\n            >\r\n              {content}\r\n            </Comp>\r\n          </TooltipTrigger>\r\n          <TooltipContent>{tooltipText}</TooltipContent>\r\n        </Tooltip>\r\n      </TooltipProvider>\r\n    ) : (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        disabled={loading}\r\n        {...props}\r\n      >\r\n        {content}\r\n      </Comp>\r\n    );\r\n  },\r\n);\r\nButton.displayName = 'Button';\r\n\r\nexport { Button, buttonVariants };",
      "path": "components/extendui/button.tsx",
      "target": "components/extendui/button.tsx",
      "type": "registry:ui"
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "keyframes": {
            "glow": {
              "0%, 100%": {
                "boxShadow": "0 0 5px rgba(52, 211, 153, 0.5), 0 0 10px rgba(52, 211, 153, 0.3)"
              },
              "50%": {
                "boxShadow": "0 0 10px rgba(52, 211, 153, 0.8), 0 0 20px rgba(52, 211, 153, 0.5)"
              }
            },
            "shimmer": {
              "0%": {
                "backgroundPosition": "200% 0"
              },
              "100%": {
                "backgroundPosition": "-200% 0"
              }
            },
            "perimeterShimmer": {
              "0%, 100%": {
                "clipPath": "inset(0 0 calc(100% - 2px) 0)"
              },
              "25%": {
                "clipPath": "inset(0 0 0 calc(100% - 2px))"
              },
              "50%": {
                "clipPath": "inset(calc(100% - 2px) 0 0 0)"
              },
              "75%": {
                "clipPath": "inset(0 calc(100% - 2px) 0 0)"
              }
            }
          },
          "animation": {
            "glow": "glow 2s ease-in-out infinite",
            "shimmer": "shimmer 3s linear infinite",
            "perimeterShimmer": "perimeterShimmer 4s linear infinite"
          }
        }
      }
    }
  }
}